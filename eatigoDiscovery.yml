spring:
  application:
    name: eatigoDiscovery
  cloud:
    config:
      uri: http://202.149.218.74:10088
      fail-fast: false

# Define Port Number of Eureka Server
server:
  port: 10089


#Eureka Server Instance Name
#To Stop Discovery Eureka Server Instance
eureka:
  #instance:
   #hostname: localhost
    #serviceUrl:
     #defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
  client:
      registerWithEureka: false
      fetchRegistry: false
# Not to be used in Production environment  
#server:
    #enable-self-preservation: false 



#Peer Awareness
#Eureka can be made even more resilient and available by running multiple instances and asking them to register with each other. 
#In fact, this is the default behavior, so all you need to do to make it work is add a valid serviceUrl to a peer
#Two Peer
#---
#spring:
  #profiles: peer1
#eureka:
  #instance:
    #hostname: peer1
  #client:
    #serviceUrl:
      #defaultZone: http://peer2/eureka/

#---
#spring:
  #profiles: peer2
#eureka:
  #instance:
    #hostname: peer2
  #client:
    #serviceUrl:
      #defaultZone: http://peer1/eureka/

#Multi-Peer Eureka Server
#You can add multiple peers to a system, and, as long as they are all connected to each other by at least one edge, 
#they synchronize the registrations amongst themselves. If the peers are physically separated (inside a data center or between multiple data centers), 
#then the system can, in principle, survive “split-brain” type failures. You can add multiple peers to a system, 
#and as long as they are all directly connected to each other, they will synchronize the registrations amongst themselves.

#eureka:
  #client:
    #serviceUrl:
      #defaultZone: http://peer1/eureka/,http://peer2/eureka/,http://peer3/eureka/

#---
#spring:
  #profiles: peer1
#eureka:
  #instance:
    #hostname: peer1

#---
#spring:
  #profiles: peer2
#eureka:
  #instance:
    #hostname: peer2

#---
#spring:
  #profiles: peer3
#eureka:
  #instance:
    #hostname: peer3

#Prefer IP Address
#it is preferable for Eureka to advertise the IP addresses of services rather than the hostname. 
#Set eureka.instance.preferIpAddress to true and, when the application registers with eureka, it uses its IP address rather than its hostname.


#Securing The Eureka Server
#You can secure your Eureka server simply by adding Spring Security to your server’s classpath via spring-boot-starter-security. 
#By default when Spring Security is on the classpath it will require that a valid CSRF token be sent with every request to the app. 
#Eureka clients will not generally possess a valid cross site request forgery (CSRF) token 
#you will need to disable this requirement for the /eureka/** endpoints. 

#@EnableWebSecurity
#class WebSecurityConfig extends WebSecurityConfigurerAdapter {

#    @Override
#    protected void configure(HttpSecurity http) throws Exception {
#        http.csrf().ignoringAntMatchers("/eureka/**");
#        super.configure(http);
#    }
#}
